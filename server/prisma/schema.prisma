generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL_1")
}

model User {
  id            String  @id @default(uuid())
  username      String? @unique
  firstName     String
  lastName      String
  age           String?
  phone         String? @unique
  region        String?
  province      String?
  city          String?
  baranggay     String?
  street        String?
  other         String?
  profilePicId  String?
  profilePicUrl String?

  email        String      @unique
  password     String
  refreshToken String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  cart         Cart?
  userRating   UserRating?
  Order        Order[]
}

model Product {
  id           String         @id @default(uuid())
  name         String
  description  String
  category     String
  price        Float
  stock        Int
  sold         Int            @default(0)
  variants     Json
  ratings      UserRating[]
  productImage ProductImage[]
  cart         CartItem[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  OrderItem    OrderItem[]
}

model CartItem {
  id String @id @default(uuid())

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  cartId String
  Cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  quantity Int
  variants Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id String @id @default(uuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  cartItem CartItem[]
  subtotal Float      @default(0.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id        String   @id @default(uuid())
  imageId   String
  imageUrl  String
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model UserRating {
  id      String @id @default(uuid())
  rate    Int
  comment String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Order {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  totalAmount  Float
  orderItems   OrderItem[]
  trackingInfo TrackingInfo?
  status       OrderStatus   @default(PENDING)

  region    String
  province  String
  city      String
  baranggay String
  street    String
  other     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  variants  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrackingInfo {
  id            String   @id @default(uuid())
  orderId       String   @unique
  order         Order    @relation(fields: [orderId], references: [id])
  currentStatus String
  location      String
  updatedAt     DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
